

        Que es Redux

Es un contenedor predecible del estado de nuestra aplicacion, es una forma de controlar donde
se encuentra la informacion de la aplicacion en todo momento y tambien nos ayuda a que la modificacion
de la informacion siempre sea en una sola vida de manera predecible, con el objetivo de preevenir cambios
accidentales en la misma.

Esta es una forma de mantener el estado de la aplicacion y es independiente al Framework o libreria
Entre los conceptos de Redux estan:
    - Store: Aqui se conoce como la fuente unica de la verdad (Aqui es donde esta la informacion que 
             nuestros componentes van a consumir). Los componentes van a ir al Store a traer la informacion
             que nesecitan para trabajar 
    
    Ya antes habiamos visto el Reducer que es una funcion pura que maneja el estado, el estado le sirve la 
    informacion a la pagina o la vista para que muestre la informacion deseada (La vista no modifica el State
    directamente, solo lo Lee y cuando se requiere hacer una modificacion a la misma entonces la pagina o vista
    genera una Accion, esa accion es enviada al Reducer y el Reducer ejecuta la accion) despues que se ejecute
    esa accion en el Reducer (Esto es como en el Redux que es una funcion pura) entonces el Reducer genera un
    nuevo estado que ese estado es el que se le notifica a la vista.

    Ahora veamos lo de arriba pero usando Redux, Entonces siempre vamos a tener un State que va a ser dado por
    el Store, ese Estado cumple la misma funcion que antes, donde tenemos nuestra vista, esta requiere informacion
    que la obtiene del State del Store, muestra la informacion y hace lo que tenga que hacer con los datos, pero
    al momento que se requiere disparar alguna modificacion o hacer alguna accion, nuevamente se vuelve a crear un
    Action, esta accion cae en lo que se llama un "Dispatcher" que es este quien recibe dicha accion, la abre, la 
    analiza y se la manda a un Reducer Especial, ese Reducer es una combinacion de todos los reducers que va a tener
    la aplicacion (Es decir vamos a tener un Reducer para manejar la autenticacion, otro para los TODOS, otro para las
    tareas pendientes, otro para entradas, etc), ese Reducer contiene un monton de Reducer peque√±os de los cuales el 
    dispacher le va a decir "Okey tengo esta accion, Quien de ustedes la hace?" Detecta el Reducer que hace la accion
    y ese reducer ejecuta la accion, hace lo que tenga que hacer y genera un Nuevo State, Este State es el que notifica 
    a la vista. (Todo este proceso que acabamos de ver, solo aplica si todo el proseso es Sincrono, en nigun momento 
    ocupamos peticiones HTTP o tareas Asincronas, Aqui todo se ejecuta de forma casi instantanea).

    En el momento que la Vista requiera una accion asyncrona por ejemplo realizar una autenticacion para el Login, entonces
    esto no es algo que de manera instantanea sepamos que hacer, se tiene que esperar a recibir la informacion, entonces
    si disparamos esa accion, esta va a caer en el Dispacher pero va a detectar que es algo asyncrono entonces se tiene que 
    implementar un Middleware (Puede que tengamos varios middleware), este Middleware es el que recibe la tarea asyncrona
    va a ejecutar la accion (Llama al API, trae los datos, va a esperar la respuesta) y cuando tiene la respuesta, ese API
    se lo notifica al Middleware que esta dentro del Dispacher por lo cual cuando se recibe la informacion se lo va a mandar
    ya con todo el resultado final obtenido, se lo manda al reducer Principal ("Ya se tiene esta accion, ya tenemos el usuario
    autenticado, ya esta todo listo, Quien va a realizar esta accion?") que modifica el State y regresa uno nuevo, todo lo
    demas sigue siendo lo mismo.

Resumen del Flujo de la infomacion:
    - Para una tarea Syncrona: Ocurre un cambio en la pantalla o alguna informacion se cambio, etc. (Ya tenemos nuestro State
      y tenemos la vista), la vista dispara la accion, la accion se crea y se envia al Dispacher, este detecta que es una tarea
      sincrona, entonces se lo manda al Reducer, este detecta cual de todos maneja esa accion que se recibio, Ejecuta la accion
      el reducer encargado, hace la modificacion del State y este es recibido en la Vista

    - Para una tarea Asyncrona: La vista crea la accion, esta se manda al dispacher que detecta que es asyncrona entonces el 
      middleware se encarga de hacerlo, que manda la accion (Suponiendo que es una peticion HTTP) a un API, cuando se resuelve
      entra nuevamente al dispacher y de ahi se lo manda al Reducer, el encargado lo recibe y hace la accion, modificando el State
      y regresa ese nuevo state a la vista

    
    Ahora en React tenemos varias cosas 

        - Redux: Es el patron en el cual se basa en crear nuevos estados basado en Reducers, estos crean los nuevos estados y esos
                 estados tambien son producto con las acciones que son recibidas en los Reducers
        
        - React Redux: Era la forma tradicional con la cual se trabaja Redux dentro de React, el inconveniente es que hay mucho codigo
                        que teniamos que escribir si queriamos que funcionara algo, principalmente para tareas asincronas nos teniamos
                        que crear todo manualmente
        
        - Redux Toolkit: Es una serie de herramientas que nos va a ayudar a nosotros a que la implementacion del patron Redux en las 
                         aplicaciones de React sea mucho mas sencillo porque ya esta el Toolkit creando todo por nosotros.
                         Con este vamos a crear y manejar el "Store" (Cualquier informacion que se requiera se va tomar del Store)

Despues de creado el pryecto:
  Instalamos:
    - yarn add @reduxjs/toolkit react-redux

Aclaraciones del Store, la idea es que cuando se requiera cualquier pieza del estado, es decir si el SideBar esta abierto, si el usuario 
esta autenticado o cualquier informacion que se requiera compartir con otros componentes entonces en el Store es donde se almacenara 
estas piezas de informacion, no nesesariamente porque estamos trabajando con Redux siginifica que todo lo vamos a colocar en el Store ya 
que puede que requiramos algun estado local en algun componente y en ese caso podemos usar el UseState o UseReducer (Cualquier otra forma 
de mantener el estado en un componente), un ejemplo serian condiciones como de un boton habilitado o deshabilitado (Debemos saber que cosas
meter en el Store y cuales mantener en un componente en un estado local), la idea es que cuando se requiera culquier informacion del estado
se busque dentro del Store

  Creamos la carpeta "Store" donde vamos a tenerlo

  Despues de esto ocupamos proveer el Store a todos los componentes de React
    Aqui vamos a aplicar el patron cuando teniamos el Provider y lo poniamos en el main.jsx
    osea tenemos que crearnos un proveedor (Se pone en el Root de la aplicacion porque queremos que nuestro Store este de manera global en toda 
    la aplicacion "main.jsx") a este como parametro le mandamos el Store que creamos

  Tenemos que crear el Reducer
    Aqui vamos a aplicar el ejemplo del Contador evitando usar el State Local para utilizar el Store, ahora aqui entran lo que se llaman Slice
    donde podemos crear rapidamente una serie de reducers, definir el initialState y un nombre con el cual las acciones van a salir disparadas
    hacia ese lugar e identificar esa accion en el Redux

      Para esto creamos la carpeta "Slice" dentro de "Store" y dentro subcarpetas para cada uno de los diferentes Slice que vamos a tener
      (El Slice es en si una funcion que recibe un objeto).
      Primero creamos el counterSlice.js
    
  Para utilizarlo lo colocamos en el Store
    Dentro del Store.js en la parte del "reducer" ahi le damos el nombre que queramos para que sea identificado luego de ahi le pasamos el counterSlice
    que creamos pero apuntando al ".reducer"

  Ahora sigue utilizar la pieza del Store que nos interesa que en este caso es el "counter", de aqui utilizamos dos Hooks que son:
    el "useSelector" para cuando nosotros ocupamos seleccionar o tomar alguna pieza del State y tenemos el "useDispatch" para tener acceso
    a la funcion "dispatch" la cual nos despacha acciones que solo las mandamos a llamar y ya. (Con estos Hooks interactuamos con nuestro Store)
        Esto lo implementamos en el Archivo "App.jsx"

Como para todo lo que es Redux vamos a estar usando Slices, al final de cuentas el codigo basico siempre va a ser el mismo para todos los Slices
que requiramos, asi que lo mejor es que nos creemos un Snipper donde ya venga el codigo basico
  Pasos:
    - Ctrl+Shift+P
    - Configure User Snippets
    - Elegimos "javascript"
    - Editamos el archivo JS del VScode


Peticiones Asincronas
  - Vamos a usar la APi de "pokeapi.co"
  - Para esto nos creamos su Reducer para menajar la informacion de los reducer, las acciones, el estado inicial, el nombre a dar a la pieza del store
  - Despues en el Store le decimos y le creamos un nuevo espacio llamado "pokemons" y le pasamos el Slice que creamos
    (Todo esto es mas rapido que crearse el useReducer, el reducer, las acciones, la implementacion del Provider en el main, etc )

  Thunks: Es una accion que es asincrona que dispara otra accion cuando se resuelve la peticion asincrona
          Estos los podemos crear dentro del mismo slice, estos queremos que sean como funciones que despachan otra accion, puede que tengamos
          muchas acciones que sean asincronas (Un Thunk es una funcion que va a ejectuar alguna traea asincrona y cuando termina ya sea exitosa
          o con errores va a disparar una accion a nuestro reducer) en pocas palabras cuando el Thunk se ejecute va a llamar a los Reducer que tengamos
          segun sea el caso

        Para tener mas limpio el Slide vamos a crear los Thunks en un arhcivo aparte llamado "thunks.js"
        Este thunk lo mandamos a llamar a "PokemonApp.js"

  Para hacer la llamada al API vamos a usar AXIOs porque nos permite hacer ma configuracion
      Se tiene que instalar: yarn add axios
      Despues creamos la carpeta: src/api y dentro la implementacion de Axios

  
    RTK Query

      Es algo que se integra nativamente con Redux el cual se utiliza para hacer peticiones como llamadas a Endpoints, no es un remplazo
      de FetchAPI ni de AXIOS (Podemos usar estos dos con RTK query), lo que nos ayuda es evitar traer informacion duplicada si ya se 
      encuentra almacenada en el Cache esa peticion. La primera vez es mucho codigo (Mucha configuracion) podriamos decir que es mucho para
      hacer una peticion HTTP, lo que pasa es que no solo nos maneja la peticion sino que  maneja el Cache, nos crea CustomHook y muchas 
      otras cosas para utilizarlo no hay que importar nada mas si ya estamos trabajando con el ReduxToolkit
      
      Para demostracion empezamos creando dentr de SRC un nuevo componente: TodoApp.jsx y lo implementamos dentro del "main.jsx"
      (El RTK query a pesar que va a terminar creando ciertas piezas en nuestro Store (Si podriamos buscar informacion ahi) la verdad es que utiliza
      sobre todo para controlar las peticiones HTTP, basicamente una forma de usarlo es traer la peticion HTTP, obtenemos los datos y despues
      disparamos una accion para establecer los datos), el RTK Query esta hecho para optimizar las peticiones HTTP

      Ahora dentro de la carpeta del Store creamos la subcarpeta API y ahi creamos el archivo todosApi.js

      Despues de esto nos falta configurar algo en el Store porque la idea es que siga los mismo lineamientos de Redux, donde disparemos acciones
      y estas creen nuevos estados, asi se renderizan nuevamente los componentes y todo esto lo hace de manera automatica
      Nos vamos al Store.js, de aqui implementamos el consumo en el TodoApp.jsx

      



